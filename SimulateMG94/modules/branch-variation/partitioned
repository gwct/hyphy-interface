LoadFunctionLibrary("libv3/all-terms.bf"); 
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");

simulator.omegas = {};

lfunction simulator.set_branch_rates (model, tree_id, branch_id, branch_info) {
    /** apply the same dN/dS to all branches */
    rates = (model[^"terms.parameters"])[^"terms.local"];
    my_omega = (^'simulator.omegas')[branch_info[^'terms.trees.model_map']];
    parameters.SetConstraint ("`tree_id`.`branch_id`.`rates[^'terms.parameters.nonsynonymous_rate']`", 
                              "`my_omega`*`tree_id`.`branch_id`.`rates[^'terms.parameters.synonymous_rate']`", "");
    estimators.applyBranchLength (tree_id, branch_id, model, branch_info[^"terms.branch_length"]);
    
}

lfunction simulator.validate_tree (tree) {
    if (trees.HasBranchLengths (tree)) {   
        classes = utility.UniqueValues (tree[^"terms.trees.model_map"]);
        utility.ForEach (classes, "_value_", 
            '
                if (_value_ == "") {
                    label = "Unlabeled";
                } else {
                    label = _value_;
                }
                KeywordArgument   ("omega-" + label, "The constant dN/dS ratio to apply to branches `label`", "1.");
                (^"simulator.omegas")[_value_] = "" + io.PromptUser ("dN/dS ratio for branches " + label, 1.0, 0, 1e3, FALSE);
            '
        );
        return '';
    }
    
    return 'The input tree must have input branch lengths';
}